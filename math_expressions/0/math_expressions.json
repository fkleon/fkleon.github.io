{"dependencies":[{"kind":"library","name":"dart:core","id":"dart.core","comment":"\n\nBuilt-in types, collections,\nand other core functionality for every Dart program.\n\nThis library is automatically imported.\n\nSome classes in this library,\nsuch as [String] and [num],\nsupport Dart's built-in data types.\nOther classes, such as [List] and [Map], provide data structures\nfor managing collections of objects.\nAnd still other classes represent commonly used types of data\nsuch as URIs, dates and times, and errors.\n\n## Numbers and booleans\n\n[int] and [double] provide support for Dart's built-in numerical data types:\nintegers and double-precision floating point numbers, respectively.\nAn object of type [bool] is either true or false.\nVariables of these types can be constructed from literals:\n\n    int meaningOfLife = 42;\n    double valueOfPi  = 3.141592;\n    bool visible      = true;\n\n## Strings and regular expressions\n\nA [String] is immutable and represents a sequence of characters.\n\n    String shakespeareQuote = \"All the world's a stage, ...\";\n\n[StringBuffer] provides a way to construct strings efficiently.\n\n    StringBuffer moreShakespeare = new StringBuffer();\n    moreShakespeare.write('And all the men and women ');\n    moreShakespeare.write('merely players; ...');\n\nThe String and StringBuffer classes implement string concatenation,\ninterpolation, and other string manipulation features.\n\n    String philosophy = 'Live on ';\n    String get palindrome => philosophy + philosophy.split('').reversed.join();\n\n[RegExp] implements Dart regular expressions,\nwhich provide a grammar for matching patterns within text.\nFor example, here's a regular expression that matches\na string of one or more digits:\n\n    var numbers = new RegExp(r'\\d+');\n\nDart regular expressions have the same syntax and semantics as\nJavaScript regular expressions. See\n<http://ecma-international.org/ecma-262/5.1/#sec-15.10>\nfor the specification of JavaScript regular expressions.\n\n## Collections\n\nThe dart:core library provides basic collections,\nsuch as [List], [Map], and [Set].\n\nA List is an ordered collection of objects, with a length.\nLists are sometimes called arrays.\nUse a List when you need to access objects by index.\n\n    List superheroes = [ 'Batman', 'Superman', 'Harry Potter' ];\n\nA Set is an unordered collection of unique objects.\nYou cannot get an item by index (position).\nAdding a duplicate item has no effect.\n\n    Set villians = new Set();\n    villians.add('Joker');\n    villians.addAll( ['Lex Luther', 'Voldemort'] );\n\nA Map is an unordered collection of key-value pairs.\nMaps are sometimes called associative arrays because\nmaps associate a key to some value for easy retrieval.\nKeys are unique.\nUse a Map when you need to access objects\nby a unique identifier.\n\n    Map sidekicks = { 'Batman': 'Robin',\n                      'Superman': 'Lois Lane',\n                      'Harry Potter': 'Ron and Hermione' };\n\nIn addition to these classes,\ndart:core contains [Iterable],\nan interface that defines functionality\ncommon in collections of objects.\nExamples include the ability\nto run a function on each element in the collection,\nto apply a test to each element, \nto retrieve an object, and to determine length.\n\nIterable is implemented by List and Set,\nand used by Map for its keys and values.\n\nFor other kinds of collections, check out the\n[dart:collection](#dart-collection) library.\n\n## Date and time\n\nUse [DateTime] to represent a point in time\nand [Duration] to represent a span of time.\n\nYou can create DateTime objects with constructors\nor by parsing a correctly formatted string.\n\n    DateTime now = new DateTime.now();\n    DateTime berlinWallFell = new DateTime(1989, 11, 9);\n    DateTime moonLanding = DateTime.parse(\"1969-07-20\");\n\nCreate a Duration object specifying the individual time units.\n\n    Duration timeRemaining = new Duration(hours:56, minutes:14);\n\nIn addition to DateTime and Duration,\ndart:core contains the [Stopwatch] class for measuring elapsed time.\n    \n## Uri\n\nA [Uri] object represents a uniform resource identifier,\nwhich identifies a resource on the web.\n\n    Uri dartlang = Uri.parse('http://dartlang.org/');\n    \n## Errors\n\nThe [Error] class represents the occurrence of an error\nduring runtime.\nSubclasses of this class represent specific kinds of errors.\n\n## Other documentation\n\nFor more information about how to use the built-in types, refer to\n[Built-in Types](http://www.dartlang.org/docs/dart-up-and-running/contents/ch02.html#built-in-types)\nin Chapter 2 of\n[Dart: Up and Running](http://www.dartlang.org/docs/dart-up-and-running/).\n\nAlso, see\n[dart:core - Numbers, Collections, Strings, and More](http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-dartcore---strings-collections-and-more)\nfor more coverage of classes in this package.\n\nThe \n[Dart Language Specification](http://www.dartlang.org/docs/spec/)\nprovides technical details.\n","children":[{"kind":"class","name":"Object","id":"Object","comment":"\nThe base class for all Dart objects.\n\nBecause Object is the root of the Dart class hierarchy,\nevery other Dart class is a subclass of Object.\n\nWhen you define a class, you should override [toString]\nto return a string describing an instance of that class.\nYou might also need to define [hashCode] and [==], as described in the\n[Implementing map keys]\n(http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-implementing-map-keys)\nsection of the [library tour]\n(http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html).\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"isOperator":true,"kind":"method","name":"==","id":"==1()","comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nOverride this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:\n\n * Total: It must return a boolean for all arguments. It should never throw\n   or return `null`.\n\n * Reflexive: For all objects `o`, `o == o` must be true.\n\n * Symmetric: For all objects `o1` and `o2`, `o1 == o2` and `o2 == o1` must\n   either both be true, or both be false.\n\n * Transitive: For all objects `o1`, `o2`, and `o3`, if `o1 == o2` and\n   `o2 == o3` are true, then `o1 == o3` must be true.\n\nThe method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","children":[{"kind":"param","name":"other","id":"other"}],"line":"59"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","comment":"\nReturns a string representation of this object.\n","line":"78"},{"kind":"method","name":"noSuchMethod","id":"noSuchMethod1()","comment":"\n[noSuchMethod] is invoked when users invoke a non-existant method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [Invocation].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[noSuchMethodError].\n","children":[{"ref":{"name":"Invocation","refId":"dart.core/Invocation"},"kind":"param","name":"invocation","id":"invocation"}],"line":"90"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"hashCode","id":"hashCode","comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","line":"73"},{"ref":{"name":"Type","refId":"dart.core/Type"},"kind":"property","name":"runtimeType","id":"runtimeType","comment":"\nA representation of the runtime type of the object.\n","line":"95"},{"kind":"constructor","name":"","id":"0()","comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","line":"29"}],"uri":"dart-sdk/lib/core/object.dart","line":"21"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"Comparable","id":"Comparable","comment":"\nInterface used by types that have an intrinsic ordering.\n","children":[{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"compareTo","id":"compareTo1()","comment":"\nCompares this object to another [Comparable]\n\nReturns a value like a [Comparator] when comparing [:this:] to [other].\n\nMay throw an [ArgumentError] if [other] is of a type that\nis not comparable to [:this:].\n","children":[{"ref":{"name":"T","refId":"dart.core/Comparable/T"},"kind":"param","name":"other","id":"other"}],"line":"35"},{"returnType":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"method","name":"compare","id":"compare2()","comment":"\nCompare one comparable to another.\n\nThis utility function is used as the default comparator\nfor the [List] sort function.\n","children":[{"ref":{"name":"Comparable","refId":"dart.core/Comparable"},"kind":"param","name":"a","id":"a"},{"ref":{"name":"Comparable","refId":"dart.core/Comparable"},"kind":"param","name":"b","id":"b"}],"line":"43"},{"kind":"typeparam","name":"T","id":"T"}],"uri":"dart-sdk/lib/core/comparable.dart","line":"26"}],"uri":"dart-sdk/lib/core/core.dart","line":"153"}],"kind":"library","name":"package:math_expressions/math_expressions.dart","id":"math_expressions","children":[{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"ContextModel","id":"ContextModel","comment":"\nThe context model keeps track of all known variables and functions.\n","children":[{"returnType":{"name":"Expression","refId":"math_expressions/Expression"},"kind":"method","name":"getExpression","id":"getExpression1()","comment":"\nReturns the bound expression for the given variable.\n\nThrows a StateError, if variable is not bound.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"varName","id":"varName"}],"line":"99"},{"returnType":{"name":"MathFunction","refId":"math_expressions/MathFunction"},"kind":"method","name":"getFunction","id":"getFunction1()","comment":"\nreturns the function for the given function name.\n\nThrows a StateError, if function is not bound.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"name","id":"name"}],"line":"112"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"bindGlobalVariable","id":"bindGlobalVariable2()","comment":"\nBinds a variable to an expression in this context.\n","children":[{"ref":{"name":"Variable","refId":"math_expressions/Variable"},"kind":"param","name":"v","id":"v"},{"ref":{"name":"Expression","refId":"math_expressions/Expression"},"kind":"param","name":"e","id":"e"}],"line":"127"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"bindGlobalVariableName","id":"bindGlobalVariableName2()","comment":"\nBinds a variable name to an expression in this context.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"vName","id":"vName"},{"ref":{"name":"Expression","refId":"math_expressions/Expression"},"kind":"param","name":"e","id":"e"}],"line":"134"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"bindGlobalFunction","id":"bindGlobalFunction1()","comment":"\nBinds a function to this context.\n","children":[{"ref":{"name":"MathFunction","refId":"math_expressions/MathFunction"},"kind":"param","name":"f","id":"f"}],"line":"141"},{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"String","refId":"dart.core/String"},{"name":"Expression","refId":"math_expressions/Expression"}]},"kind":"variable","name":"variables","id":"variables","comment":"Variable map (name -> bound expression).","line":"81"},{"ref":{"name":"Set","refId":"dart.core/Set","arguments":[{"name":"MathFunction","refId":"math_expressions/MathFunction"}]},"kind":"variable","name":"functions","id":"functions","line":"84"},{"kind":"constructor","name":"","id":"0()","comment":"\nCreates a new, empty context model.\n","line":"89"}],"uri":"package:math_expressions/src/evaluator.dart","line":"78"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"EvaluationType","id":"EvaluationType","comment":"\nMathematical expressions must be evaluated under a certain [EvaluationType].\n\nCurrently there are three types, but not all expressions support each type.\nIf you try to evaluate an expression with an unsupported type, it will raise an\n[UnimplementedError] or [UnsupportedError].\n\n- REAL\n- VECTOR\n- INTERVAL\n\n_Note_: This class emulates an enumeration, since they are not supported\nby Dart yet.\n","children":[{"isOperator":true,"kind":"method","name":"==","id":"==1()","comment":"\nTwo types are equal, if their internal int matches.\n","children":[{"ref":{"name":"EvaluationType","refId":"math_expressions/EvaluationType"},"kind":"param","name":"et","id":"et"}],"line":"70"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"72"},{"ref":{"name":"EvaluationType","refId":"math_expressions/EvaluationType"},"isStatic":true,"kind":"property","name":"REAL","id":"REAL","comment":"Public constructor for REAL types. Always returns the same instance of a REAL type.","line":"50"},{"ref":{"name":"EvaluationType","refId":"math_expressions/EvaluationType"},"isStatic":true,"kind":"property","name":"VECTOR","id":"VECTOR","comment":"Public constructor for VECTOR types. Always returns the same instance of a VECTOR type.","line":"53"},{"ref":{"name":"EvaluationType","refId":"math_expressions/EvaluationType"},"isStatic":true,"kind":"property","name":"INTERVAL","id":"INTERVAL","comment":"Public constructor for INTERVAL types. Always returns the same instance of a INTERVAL type.","line":"56"},{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"int","refId":"dart.core/int"},{"name":"EvaluationType","refId":"math_expressions/EvaluationType"}]},"isStatic":true,"kind":"variable","name":"_cache","id":"_cache","comment":"Our type map.","isPrivate":true,"line":"20"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"type","id":"type","line":"21"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"variable","name":"_text","id":"_text","isPrivate":true,"line":"22"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"isFinal":true,"kind":"variable","name":"REAL_INT","id":"REAL_INT","comment":"Internal integer value for REAL type.","line":"59"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"isFinal":true,"kind":"variable","name":"VECTOR_INT","id":"VECTOR_INT","comment":"Internal integer value for VECTOR type.","line":"62"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"isFinal":true,"kind":"variable","name":"INTERVAL_INT","id":"INTERVAL_INT","comment":"Internal integer value for INTERVAL type.","line":"65"},{"returnType":{"name":"EvaluationType","refId":"math_expressions/EvaluationType"},"kind":"constructor","name":"_private","id":"_private2()","comment":"\nPrivate singleton constructor, no need to instantiate new objects\nall the time.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"type","id":"type"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"text","id":"text"}],"isPrivate":true,"line":"28"},{"kind":"constructor","name":"_internal","id":"_internal2()","comment":"\nInternal constructor for EvaluationTypes.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"initializedField":{"name":"type","refId":"math_expressions/EvaluationType/type"},"kind":"param","name":"type","id":"type"},{"ref":{"name":"String","refId":"dart.core/String"},"initializedField":{"name":"_text","refId":"math_expressions/EvaluationType/_text"},"kind":"param","name":"_text","id":"_text","isPrivate":true}],"isPrivate":true,"line":"47"}],"uri":"package:math_expressions/src/evaluator.dart","line":"17"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"TokenType","id":"TokenType","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"381"},{"ref":{"name":"TokenType","refId":"math_expressions/TokenType"},"isStatic":true,"isFinal":true,"kind":"variable","name":"VAR","id":"VAR","line":"355"},{"ref":{"name":"TokenType","refId":"math_expressions/TokenType"},"isStatic":true,"isFinal":true,"kind":"variable","name":"VAL","id":"VAL","line":"356"},{"ref":{"name":"TokenType","refId":"math_expressions/TokenType"},"isStatic":true,"isFinal":true,"kind":"variable","name":"LBRACE","id":"LBRACE","line":"359"},{"ref":{"name":"TokenType","refId":"math_expressions/TokenType"},"isStatic":true,"isFinal":true,"kind":"variable","name":"RBRACE","id":"RBRACE","line":"360"},{"ref":{"name":"TokenType","refId":"math_expressions/TokenType"},"isStatic":true,"isFinal":true,"kind":"variable","name":"PLUS","id":"PLUS","line":"363"},{"ref":{"name":"TokenType","refId":"math_expressions/TokenType"},"isStatic":true,"isFinal":true,"kind":"variable","name":"MINUS","id":"MINUS","line":"364"},{"ref":{"name":"TokenType","refId":"math_expressions/TokenType"},"isStatic":true,"isFinal":true,"kind":"variable","name":"UNMINUS","id":"UNMINUS","line":"365"},{"ref":{"name":"TokenType","refId":"math_expressions/TokenType"},"isStatic":true,"isFinal":true,"kind":"variable","name":"TIMES","id":"TIMES","line":"366"},{"ref":{"name":"TokenType","refId":"math_expressions/TokenType"},"isStatic":true,"isFinal":true,"kind":"variable","name":"DIV","id":"DIV","line":"367"},{"ref":{"name":"TokenType","refId":"math_expressions/TokenType"},"isStatic":true,"isFinal":true,"kind":"variable","name":"POW","id":"POW","line":"370"},{"ref":{"name":"TokenType","refId":"math_expressions/TokenType"},"isStatic":true,"isFinal":true,"kind":"variable","name":"SQRT","id":"SQRT","line":"371"},{"ref":{"name":"TokenType","refId":"math_expressions/TokenType"},"isStatic":true,"isFinal":true,"kind":"variable","name":"LOG","id":"LOG","line":"372"},{"ref":{"name":"TokenType","refId":"math_expressions/TokenType"},"isStatic":true,"isFinal":true,"kind":"variable","name":"LN","id":"LN","line":"373"},{"ref":{"name":"TokenType","refId":"math_expressions/TokenType"},"isStatic":true,"isFinal":true,"kind":"variable","name":"EFUNC","id":"EFUNC","line":"374"},{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"value","id":"value","line":"376"},{"ref":{"name":"int","refId":"dart.core/int"},"isFinal":true,"kind":"variable","name":"priority","id":"priority","line":"377"},{"kind":"constructor","name":"","id":"2()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"initializedField":{"name":"value","refId":"math_expressions/TokenType/value"},"kind":"param","name":"value","id":"value"},{"ref":{"name":"int","refId":"dart.core/int"},"initializedField":{"name":"priority","refId":"math_expressions/TokenType/priority"},"kind":"param","name":"priority","id":"priority"}],"line":"379"}],"uri":"package:math_expressions/src/parser.dart","line":"354"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"Token","id":"Token","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"isOperator":true,"kind":"method","name":"==","id":"==1()","children":[{"ref":{"name":"Token","refId":"math_expressions/Token"},"kind":"param","name":"token","id":"token"}],"line":"345"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"349"},{"kind":"variable","name":"text","id":"text","line":"342"},{"ref":{"name":"TokenType","refId":"math_expressions/TokenType"},"isFinal":true,"kind":"variable","name":"type","id":"type","line":"343"},{"kind":"constructor","name":"","id":"2()","children":[{"initializedField":{"name":"text","refId":"math_expressions/Token/text"},"kind":"param","name":"text","id":"text"},{"ref":{"name":"TokenType","refId":"math_expressions/TokenType"},"initializedField":{"name":"type","refId":"math_expressions/Token/type"},"kind":"param","name":"type","id":"type"}],"line":"347"}],"uri":"package:math_expressions/src/parser.dart","line":"340"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"Lexer","id":"Lexer","children":[{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"Token","refId":"math_expressions/Token"}]},"kind":"method","name":"createTokenStream","id":"createTokenStream1()","comment":"\ncreates a list of tokens from the given string.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"inputString","id":"inputString"}],"line":"150"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"doIntBuffer","id":"doIntBuffer1()","comment":"\nChecks if the intBuffer contains a number and adds it to the tokenStream.\n","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"Token","refId":"math_expressions/Token"}]},"kind":"param","name":"stream","id":"stream"}],"line":"230"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"doVarBuffer","id":"doVarBuffer1()","comment":"\nChecks if the varBuffer contains a keyword or a variable and adds them to the tokenStream.\n","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"Token","refId":"math_expressions/Token"}]},"kind":"param","name":"stream","id":"stream"}],"line":"238"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"Token","refId":"math_expressions/Token"}]},"kind":"method","name":"shuntingYard","id":"shuntingYard1()","comment":"\nTransforms the lexers token stream into UPN.\n","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"Token","refId":"math_expressions/Token"}]},"kind":"param","name":"stream","id":"stream"}],"line":"250"},{"kind":"method","name":"createUPNStream","id":"createUPNStream1()","comment":"\nThis method invokes the createTokenStream methode to create an infix token stream and then invokes the shunting\nyards method to transform this stream into an UPN token stream.\n\nReturns  List<Token>.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"inputString","id":"inputString"}],"line":"334"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"Token","refId":"math_expressions/Token"}]},"kind":"property","name":"tokenStream","id":"tokenStream","line":"145"},{"kind":"variable","name":"keywords","id":"keywords","line":"125"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"Token","refId":"math_expressions/Token"}]},"kind":"variable","name":"_tokenStream","id":"_tokenStream","isPrivate":true,"line":"126"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"variable","name":"intBuffer","id":"intBuffer","line":"127"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"variable","name":"varBuffer","id":"varBuffer","line":"128"},{"kind":"constructor","name":"","id":"0()","line":"130"}],"uri":"package:math_expressions/src/parser.dart","line":"124"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"Parser","id":"Parser","children":[{"returnType":{"name":"Expression","refId":"math_expressions/Expression"},"kind":"method","name":"parse","id":"parse1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"inputString","id":"inputString"}],"line":"9"},{"ref":{"name":"Lexer","refId":"math_expressions/Lexer"},"kind":"variable","name":"lex","id":"lex","line":"5"},{"kind":"constructor","name":"","id":"0()","line":"7"}],"uri":"package:math_expressions/src/parser.dart","line":"4"},{"superclass":{"name":"DefaultFunction","refId":"math_expressions/DefaultFunction"},"kind":"class","name":"Tan","id":"Tan","comment":"\nThe tangens function.\n","children":[{"returnType":{"name":"Expression","refId":"math_expressions/Expression"},"kind":"method","name":"derive","id":"derive1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"toVar","id":"toVar"}],"line":"682"},{"returnType":{"name":"Expression","refId":"math_expressions/Expression"},"kind":"method","name":"simplify","id":"simplify0()","comment":"\nPossible simplifications:\n\n1. tan(0) = 0\n","line":"689"},{"kind":"method","name":"evaluate","id":"evaluate2()","children":[{"ref":{"name":"EvaluationType","refId":"math_expressions/EvaluationType"},"kind":"param","name":"type","id":"type"},{"ref":{"name":"ContextModel","refId":"math_expressions/ContextModel"},"kind":"param","name":"context","id":"context"}],"line":"699"},{"returnType":{"name":"Expression","refId":"math_expressions/Expression"},"kind":"method","name":"asSinCos","id":"asSinCos0()","comment":"\nReturns this tangens as sine and cosine representation.\n\n`tan(x) = sin(x) / cos(x)`\n","line":"719"},{"ref":{"name":"Expression","refId":"math_expressions/Expression"},"kind":"property","name":"arg","id":"arg","comment":"The argument of this sine function.","line":"680"},{"kind":"constructor","name":"","id":"1()","comment":"\nCreates a new cosine function with given argument expression.\n","children":[{"kind":"param","name":"arg","id":"arg"}],"line":"677"}],"uri":"package:math_expressions/src/functions.dart","line":"672"},{"superclass":{"name":"DefaultFunction","refId":"math_expressions/DefaultFunction"},"kind":"class","name":"Cos","id":"Cos","comment":"\nThe cosine function.\n","children":[{"returnType":{"name":"Expression","refId":"math_expressions/Expression"},"kind":"method","name":"derive","id":"derive1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"toVar","id":"toVar"}],"line":"631"},{"returnType":{"name":"Expression","refId":"math_expressions/Expression"},"kind":"method","name":"simplify","id":"simplify0()","comment":"\nPossible simplifications:\n\n1. cos(0) = 1\n","line":"638"},{"kind":"method","name":"evaluate","id":"evaluate2()","children":[{"ref":{"name":"EvaluationType","refId":"math_expressions/EvaluationType"},"kind":"param","name":"type","id":"type"},{"ref":{"name":"ContextModel","refId":"math_expressions/ContextModel"},"kind":"param","name":"context","id":"context"}],"line":"648"},{"ref":{"name":"Expression","refId":"math_expressions/Expression"},"kind":"property","name":"arg","id":"arg","comment":"The argument of this sine function.","line":"629"},{"kind":"constructor","name":"","id":"1()","comment":"\nCreates a new cosine function with given argument expression.\n","children":[{"kind":"param","name":"arg","id":"arg"}],"line":"626"}],"uri":"package:math_expressions/src/functions.dart","line":"621"},{"superclass":{"name":"DefaultFunction","refId":"math_expressions/DefaultFunction"},"kind":"class","name":"Sin","id":"Sin","comment":"\nThe sine function.\n","children":[{"returnType":{"name":"Expression","refId":"math_expressions/Expression"},"kind":"method","name":"derive","id":"derive1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"toVar","id":"toVar"}],"line":"580"},{"returnType":{"name":"Expression","refId":"math_expressions/Expression"},"kind":"method","name":"simplify","id":"simplify0()","comment":"\nPossible simplifications:\n\n1. sin(0) = 0\n","line":"587"},{"kind":"method","name":"evaluate","id":"evaluate2()","children":[{"ref":{"name":"EvaluationType","refId":"math_expressions/EvaluationType"},"kind":"param","name":"type","id":"type"},{"ref":{"name":"ContextModel","refId":"math_expressions/ContextModel"},"kind":"param","name":"context","id":"context"}],"line":"597"},{"ref":{"name":"Expression","refId":"math_expressions/Expression"},"kind":"property","name":"arg","id":"arg","comment":"The argument of this sine function.","line":"578"},{"kind":"constructor","name":"","id":"1()","comment":"\nCreates a new sine function with given argument expression.\n","children":[{"kind":"param","name":"arg","id":"arg"}],"line":"575"}],"uri":"package:math_expressions/src/functions.dart","line":"570"},{"superclass":{"name":"Root","refId":"math_expressions/Root"},"kind":"class","name":"Sqrt","id":"Sqrt","comment":"\nThe square root function.\n","children":[{"returnType":{"name":"Expression","refId":"math_expressions/Expression"},"kind":"method","name":"simplify","id":"simplify0()","comment":"\nPossible simplifications:\n\n1. sqrt(x^2) = x\n2. sqrt(0) = 0\n3. sqrt(1) = 1\n\nNote: This simplification works _only_ for real numbers and\n_not_ for complex numbers.\n","line":"521"},{"kind":"method","name":"evaluate","id":"evaluate2()","children":[{"ref":{"name":"EvaluationType","refId":"math_expressions/EvaluationType"},"kind":"param","name":"type","id":"type"},{"ref":{"name":"ContextModel","refId":"math_expressions/ContextModel"},"kind":"param","name":"context","id":"context"}],"line":"544"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"564"},{"kind":"constructor","name":"","id":"1()","comment":"\nCreates the square root of arg.\n\nFor example, to create the square root of x:\n    sqrt = new Sqrt(new Variable('x'));\n","children":[{"kind":"param","name":"arg","id":"arg"}],"line":"509"}],"uri":"package:math_expressions/src/functions.dart","line":"501"},{"superclass":{"name":"DefaultFunction","refId":"math_expressions/DefaultFunction"},"kind":"class","name":"Root","id":"Root","comment":"\nThe n-th root function. n needs to be a natural number.\n","children":[{"returnType":{"name":"Expression","refId":"math_expressions/Expression"},"kind":"method","name":"derive","id":"derive1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"toVar","id":"toVar"}],"line":"472"},{"returnType":{"name":"Expression","refId":"math_expressions/Expression"},"kind":"method","name":"simplify","id":"simplify0()","comment":"\nSimplify argument.\n","line":"477"},{"kind":"method","name":"evaluate","id":"evaluate2()","children":[{"ref":{"name":"EvaluationType","refId":"math_expressions/EvaluationType"},"kind":"param","name":"type","id":"type"},{"ref":{"name":"ContextModel","refId":"math_expressions/ContextModel"},"kind":"param","name":"context","id":"context"}],"line":"481"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"486"},{"returnType":{"name":"Expression","refId":"math_expressions/Expression"},"kind":"method","name":"asPower","id":"asPower0()","comment":"\nReturns the power form of this root.\nE.g. root_5(x) = x^(1/5)\n\nThis method is used to determine the derivation of a root\nexpression.\n","line":"495"},{"ref":{"name":"Expression","refId":"math_expressions/Expression"},"kind":"property","name":"arg","id":"arg","line":"470"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"n","id":"n","comment":"N-th root.","line":"450"},{"kind":"constructor","name":"","id":"2()","comment":"\nCreates the n-th root of arg.\n\nFor example, to create the 5th root of x:\n    root = new Root(5, new Variable('x'));\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"initializedField":{"name":"n","refId":"math_expressions/Root/n"},"kind":"param","name":"n","id":"n"},{"kind":"param","name":"arg","id":"arg"}],"line":"458"},{"kind":"constructor","name":"sqrt","id":"sqrt1()","comment":"\nCreates the square root of arg.\n\nFor example, to create the square root of x:\n    sqrt = new Root.sqrt(new Variable('x'));\n\nNote: For better simplification and display, use the [Sqrt] class.\n","children":[{"kind":"param","name":"arg","id":"arg"}],"line":"468"}],"uri":"package:math_expressions/src/functions.dart","line":"447"},{"superclass":{"name":"Log","refId":"math_expressions/Log"},"kind":"class","name":"Ln","id":"Ln","comment":"\nThe natural logarithm (log based e).\n","children":[{"returnType":{"name":"Expression","refId":"math_expressions/Expression"},"kind":"method","name":"derive","id":"derive1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"toVar","id":"toVar"}],"line":"409"},{"returnType":{"name":"Expression","refId":"math_expressions/Expression"},"kind":"method","name":"simplify","id":"simplify0()","comment":"\nPossible simplifications:\n\n1. ln(1) = 0\n","line":"416"},{"kind":"method","name":"evaluate","id":"evaluate2()","children":[{"ref":{"name":"EvaluationType","refId":"math_expressions/EvaluationType"},"kind":"param","name":"type","id":"type"},{"ref":{"name":"ContextModel","refId":"math_expressions/ContextModel"},"kind":"param","name":"context","id":"context"}],"line":"426"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"441"},{"kind":"constructor","name":"","id":"1()","comment":"\nCreates a natural logarithm function with given argument.\n\nFor example, to create ln(10):\n    num10 = new Number(10);\n    ln = new Ln(num10);\n\nTo create a logarithm with arbitrary base, see [Log].\n","children":[{"ref":{"name":"Expression","refId":"math_expressions/Expression"},"kind":"param","name":"arg","id":"arg"}],"line":"407"}],"uri":"package:math_expressions/src/functions.dart","line":"396"},{"superclass":{"name":"DefaultFunction","refId":"math_expressions/DefaultFunction"},"kind":"class","name":"Log","id":"Log","comment":"\nThe logarithm function.\n","children":[{"returnType":{"name":"Expression","refId":"math_expressions/Expression"},"kind":"method","name":"derive","id":"derive1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"toVar","id":"toVar"}],"line":"358"},{"returnType":{"name":"Expression","refId":"math_expressions/Expression"},"kind":"method","name":"simplify","id":"simplify0()","comment":"\nSimplifies base and argument.\n","line":"363"},{"kind":"method","name":"evaluate","id":"evaluate2()","children":[{"ref":{"name":"EvaluationType","refId":"math_expressions/EvaluationType"},"kind":"param","name":"type","id":"type"},{"ref":{"name":"ContextModel","refId":"math_expressions/ContextModel"},"kind":"param","name":"context","id":"context"}],"line":"367"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"381"},{"returnType":{"name":"Expression","refId":"math_expressions/Expression"},"kind":"method","name":"asNaturalLogarithm","id":"asNaturalLogarithm0()","comment":"\nReturns the natural from of this logarithm.\nE.g. log_10(2) = ln(2) / ln(10)\n\nThis method is used to determine the derivation of a logarithmic\nexpression.\n","line":"390"},{"ref":{"name":"Expression","refId":"math_expressions/Expression"},"kind":"property","name":"base","id":"base","comment":"The base of this logarithm.","line":"353"},{"ref":{"name":"Expression","refId":"math_expressions/Expression"},"kind":"property","name":"arg","id":"arg","comment":"The argument of this logarithm.","line":"356"},{"kind":"constructor","name":"","id":"2()","comment":"\nCreates a logarithm function with given base and argument.\n\nFor example, to create log_10(2):\n    base = new Number(10);\n    arg = new Number(2);\n    log = new Log(base, arg);\n\nTo create a naturally based logarithm, see [Ln].\n","children":[{"ref":{"name":"Expression","refId":"math_expressions/Expression"},"kind":"param","name":"base","id":"base"},{"ref":{"name":"Expression","refId":"math_expressions/Expression"},"kind":"param","name":"arg","id":"arg"}],"line":"344"},{"kind":"constructor","name":"_ln","id":"_ln1()","comment":"\nCreates a natural logarithm.\nMust only be used internally by the Ln class.\n","children":[{"kind":"param","name":"arg","id":"arg"}],"isPrivate":true,"line":"350"}],"uri":"package:math_expressions/src/functions.dart","line":"332"},{"superclass":{"name":"DefaultFunction","refId":"math_expressions/DefaultFunction"},"kind":"class","name":"Exponential","id":"Exponential","comment":"\nThe exponential function.\n","children":[{"returnType":{"name":"Expression","refId":"math_expressions/Expression"},"kind":"method","name":"derive","id":"derive1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"toVar","id":"toVar"}],"line":"280"},{"returnType":{"name":"Expression","refId":"math_expressions/Expression"},"kind":"method","name":"simplify","id":"simplify0()","comment":"\nPossible simplifications:\n\n1. e^0 = 1\n2. e^1 = e\n3. e^(x*ln(y)) = y^x (usually easier to read for humans)\n","line":"289"},{"kind":"method","name":"evaluate","id":"evaluate2()","children":[{"ref":{"name":"EvaluationType","refId":"math_expressions/EvaluationType"},"kind":"param","name":"type","id":"type"},{"ref":{"name":"ContextModel","refId":"math_expressions/ContextModel"},"kind":"param","name":"context","id":"context"}],"line":"309"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"326"},{"ref":{"name":"Expression","refId":"math_expressions/Expression"},"kind":"property","name":"exp","id":"exp","comment":"The exponent of this exponential function.","line":"278"},{"kind":"constructor","name":"","id":"1()","comment":"\nCreates a exponential operation on the given expressions.\n\nFor example, to create e^4:\n    four = new Number(4);\n    exp = new Exponential(four);\n\nYou also can use variables or arbitrary expressions:\n    x = new Variable('x');\n    exp = new Exponential(x);\n    exp = new Exponential(x + 4);\n","children":[{"kind":"param","name":"exp","id":"exp"}],"line":"275"}],"uri":"package:math_expressions/src/functions.dart","line":"261"},{"superclass":{"name":"MathFunction","refId":"math_expressions/MathFunction"},"isAbstract":true,"kind":"class","name":"DefaultFunction","id":"DefaultFunction","comment":"\nA default function is predefined in this library.\nIt contains no expression, because the appropriate [Evaluator] knows\nhow to handle them.\n\n__Note__:\nUser-defined custom functions should derive from [CustomFunction], which\nsupports arbitrary expressions.\n","children":[{"returnType":{"name":"Variable","refId":"math_expressions/Variable"},"kind":"method","name":"_wrapIntoVariable","id":"_wrapIntoVariable1()","comment":"\nReturns a variable, bound to the given [Expression].\nReturns the parameter itself, if it is already a variable.\n","children":[{"ref":{"name":"Expression","refId":"math_expressions/Expression"},"kind":"param","name":"e","id":"e"}],"isPrivate":true,"line":"247"},{"kind":"constructor","name":"_unary","id":"_unary2()","comment":"\nCreates a new unary function with given name and argument.\nIf the argument is not a variable, it will be wrapped into an anonymous\nvariable, which binds the given expression.\n\n__Note__:\nMust only be used internally for pre-defined functions, as it does not\ncontain any expression. The Evaluator needs to know how to handle this.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"name","id":"name"},{"ref":{"name":"Expression","refId":"math_expressions/Expression"},"kind":"param","name":"arg","id":"arg"}],"isPrivate":true,"line":"223"},{"kind":"constructor","name":"_binary","id":"_binary3()","comment":"\nCreates a new binary function with given name and two arguments.\nIf the arguments are not variables, they will be wrapped into anonymous\nvariables, which bind the given expressions.\n\n__Note__:\nMust only be used internally for pre-defined functions, as it does not\ncontain any expression. The Evaluator needs to know how to handle this.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"name","id":"name"},{"ref":{"name":"Expression","refId":"math_expressions/Expression"},"kind":"param","name":"arg1","id":"arg1"},{"ref":{"name":"Expression","refId":"math_expressions/Expression"},"kind":"param","name":"arg2","id":"arg2"}],"isPrivate":true,"line":"237"}],"uri":"package:math_expressions/src/functions.dart","line":"212"},{"superclass":{"name":"MathFunction","refId":"math_expressions/MathFunction"},"kind":"class","name":"CustomFunction","id":"CustomFunction","comment":"\nAny user-created function is a CustomFunction.\n","children":[{"returnType":{"name":"Expression","refId":"math_expressions/Expression"},"kind":"method","name":"derive","id":"derive1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"toVar","id":"toVar"}],"line":"189"},{"returnType":{"name":"Expression","refId":"math_expressions/Expression"},"kind":"method","name":"simplify","id":"simplify0()","line":"191"},{"kind":"method","name":"evaluate","id":"evaluate2()","children":[{"ref":{"name":"EvaluationType","refId":"math_expressions/EvaluationType"},"kind":"param","name":"type","id":"type"},{"ref":{"name":"ContextModel","refId":"math_expressions/ContextModel"},"kind":"param","name":"context","id":"context"}],"line":"195"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toFullString","id":"toFullString0()","line":"200"},{"ref":{"name":"Expression","refId":"math_expressions/Expression"},"kind":"variable","name":"expression","id":"expression","comment":"Function expression of this function.\nUsed for non-default or user-defined functions.","line":"181"},{"kind":"constructor","name":"","id":"3()","comment":"\nCreate a custom function with the given name, argument variables,\nand expression.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"name","id":"name"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"Variable","refId":"math_expressions/Variable"}]},"kind":"param","name":"args","id":"args"},{"ref":{"name":"Expression","refId":"math_expressions/Expression"},"initializedField":{"name":"expression","refId":"math_expressions/CustomFunction/expression"},"kind":"param","name":"expression","id":"expression"}],"line":"187"}],"uri":"package:math_expressions/src/functions.dart","line":"178"},{"superclass":{"name":"MathFunction","refId":"math_expressions/MathFunction"},"kind":"class","name":"CompositeFunction","id":"CompositeFunction","comment":"\nA composition of two given [MathFunction]s.\n","children":[{"returnType":{"name":"Expression","refId":"math_expressions/Expression"},"kind":"method","name":"derive","id":"derive1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"toVar","id":"toVar"}],"line":"101"},{"returnType":{"name":"Expression","refId":"math_expressions/Expression"},"kind":"method","name":"simplify","id":"simplify0()","comment":"\nSimplifies both component functions.\n","line":"119"},{"kind":"method","name":"evaluate","id":"evaluate2()","children":[{"ref":{"name":"EvaluationType","refId":"math_expressions/EvaluationType"},"kind":"param","name":"type","id":"type"},{"ref":{"name":"ContextModel","refId":"math_expressions/ContextModel"},"kind":"param","name":"context","id":"context"}],"line":"126"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"gDomainDimension","id":"gDomainDimension","comment":"The domain of the 'second' function, which should match the range\nof the 'first function.","line":"96"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"domainDimension","id":"domainDimension","comment":"The domain of the 'first' function.","line":"99"},{"ref":{"name":"MathFunction","refId":"math_expressions/MathFunction"},"kind":"variable","name":"f","id":"f","comment":"Members `f` and `g` of the composite function.","line":"61"},{"ref":{"name":"MathFunction","refId":"math_expressions/MathFunction"},"kind":"variable","name":"g","id":"g","comment":"Members `f` and `g` of the composite function.","line":"61"},{"kind":"constructor","name":"","id":"2()","comment":"\nCreates a function composition.\n\nFor example, given `f(x): R -> R^3` and `g(x,y,z): R^3 -> R`\nthe composition yields `(g ° f)(x): R -> R^3 -> R`. First\n`f` is applied, then `g` is applied.\n\nGiven some requirements\n    x = new Variable('x');\n    xPlus = new Plus(x, 1);\n    xMinus = new Minus(x, 1);\n\n    fExpr = new Vector([x, xPlus, xMinus]);        // Transforms x to 3-dimensional vector\n    f = new CustomFunction('f', [x], fExpr);       // Creates a function R -> R^3 from fExpr\n\n    y = new Variable('z');\n    z = new Variable('y');\n\n    gExpr = x + y + z;                             // Transforms 3-dimensional input to real value\n    g = new CustomFunction('g', [x, y, z], gExpr)  // Creates a function R^3 -> R from gExpr\n\na composition can be created as follows:\n    composite = new CompositeFunction(f, g); // R -> R\n                                             // composite(2) = 6\n","children":[{"ref":{"name":"MathFunction","refId":"math_expressions/MathFunction"},"kind":"param","name":"f","id":"f"},{"ref":{"name":"MathFunction","refId":"math_expressions/MathFunction"},"kind":"param","name":"g","id":"g"}],"line":"88"}],"uri":"package:math_expressions/src/functions.dart","line":"59"},{"superclass":{"name":"Expression","refId":"math_expressions/Expression"},"isAbstract":true,"kind":"class","name":"MathFunction","id":"MathFunction","comment":"\nA function with an arbitrary number of arguments.\n\n**Note:** Functions do not offer auto-wrapping of arguments into [Literal]s.\n","children":[{"returnType":{"name":"Variable","refId":"math_expressions/Variable"},"kind":"method","name":"getParam","id":"getParam1()","comment":"\nReturns the i-th parameter of this function.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"i","id":"i"}],"line":"36"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"41"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toFullString","id":"toFullString0()","comment":"\nReturns the full string representation of this function.\nThis could include the name, variables and expression.\n\nAny subclass should decide whether to override this method.\n","line":"49"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"domainDimension","id":"domainDimension","comment":"The dimension of the domain of definition of this function.","line":"39"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"variable","name":"name","id":"name","comment":"Name of this function.","line":"10"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"Variable","refId":"math_expressions/Variable"}]},"kind":"variable","name":"args","id":"args","comment":"List of arguments of this function.\nMust be a variable.","line":"14"},{"kind":"constructor","name":"","id":"2()","comment":"\nCreates a new function with the given name and arguments.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"initializedField":{"name":"name","refId":"math_expressions/MathFunction/name"},"kind":"param","name":"name","id":"name"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"Variable","refId":"math_expressions/Variable"}]},"initializedField":{"name":"args","refId":"math_expressions/MathFunction/args"},"kind":"param","name":"args","id":"args"}],"line":"22"},{"kind":"constructor","name":"_empty","id":"_empty1()","comment":"\nCreates a new function with the given name.\n\n__Note__:\nMust only be used internally by subclasses, as it does not define any\narguments.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"initializedField":{"name":"name","refId":"math_expressions/MathFunction/name"},"kind":"param","name":"name","id":"name"}],"isPrivate":true,"line":"31"}],"uri":"package:math_expressions/src/functions.dart","line":"8"},{"superclass":{"name":"Literal","refId":"math_expressions/Literal"},"kind":"class","name":"IntervalLiteral","id":"IntervalLiteral","comment":"\nAn interval literal.\n","children":[{"returnType":{"name":"Expression","refId":"math_expressions/Expression"},"kind":"method","name":"derive","id":"derive1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"toVar","id":"toVar"}],"line":"826"},{"returnType":{"name":"Expression","refId":"math_expressions/Expression"},"kind":"method","name":"simplify","id":"simplify0()","line":"831"},{"kind":"method","name":"evaluate","id":"evaluate2()","children":[{"ref":{"name":"EvaluationType","refId":"math_expressions/EvaluationType"},"kind":"param","name":"type","id":"type"},{"ref":{"name":"ContextModel","refId":"math_expressions/ContextModel"},"kind":"param","name":"context","id":"context"}],"line":"835"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"855"},{"ref":{"name":"Expression","refId":"math_expressions/Expression"},"kind":"variable","name":"min","id":"min","line":"814"},{"ref":{"name":"Expression","refId":"math_expressions/Expression"},"kind":"variable","name":"max","id":"max","line":"814"},{"kind":"constructor","name":"","id":"2()","comment":"\nCreates a new interval with given borders.\n","children":[{"ref":{"name":"Expression","refId":"math_expressions/Expression"},"initializedField":{"name":"min","refId":"math_expressions/IntervalLiteral/min"},"kind":"param","name":"min","id":"min"},{"ref":{"name":"Expression","refId":"math_expressions/Expression"},"initializedField":{"name":"max","refId":"math_expressions/IntervalLiteral/max"},"kind":"param","name":"max","id":"max"}],"line":"819"},{"kind":"constructor","name":"fromSingle","id":"fromSingle1()","comment":"\nCreates a new interval with identical borders.\n","children":[{"ref":{"name":"Expression","refId":"math_expressions/Expression"},"kind":"param","name":"exp","id":"exp"}],"line":"824"}],"uri":"package:math_expressions/src/expression.dart","line":"813"},{"superclass":{"name":"Variable","refId":"math_expressions/Variable"},"kind":"class","name":"BoundVariable","id":"BoundVariable","comment":"\nA bound variable is an anonymous variable, e.g. a variable without name,\nwhich is bound to an expression.\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"isConstant","id":"isConstant0()","line":"795"},{"returnType":{"name":"num","refId":"dart.core/num"},"kind":"method","name":"getConstantValue","id":"getConstantValue0()","line":"798"},{"returnType":{"name":"Expression","refId":"math_expressions/Expression"},"kind":"method","name":"derive","id":"derive1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"toVar","id":"toVar"}],"line":"801"},{"returnType":{"name":"Expression","refId":"math_expressions/Expression"},"kind":"method","name":"simplify","id":"simplify0()","line":"803"},{"kind":"method","name":"evaluate","id":"evaluate2()","children":[{"ref":{"name":"EvaluationType","refId":"math_expressions/EvaluationType"},"kind":"param","name":"type","id":"type"},{"ref":{"name":"ContextModel","refId":"math_expressions/ContextModel"},"kind":"param","name":"context","id":"context"}],"line":"805"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"807"},{"kind":"constructor","name":"","id":"1()","comment":"\nCreates an anonymous variable which is bound to the given expression.\n","children":[{"ref":{"name":"Expression","refId":"math_expressions/Expression"},"kind":"param","name":"expr","id":"expr"}],"line":"789"}],"uri":"package:math_expressions/src/expression.dart","line":"785"},{"superclass":{"name":"Literal","refId":"math_expressions/Literal"},"kind":"class","name":"Variable","id":"Variable","comment":"\nA variable is a named literal.\n","children":[{"returnType":{"name":"Expression","refId":"math_expressions/Expression"},"kind":"method","name":"derive","id":"derive1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"toVar","id":"toVar"}],"line":"771"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"773"},{"kind":"method","name":"evaluate","id":"evaluate2()","children":[{"kind":"param","name":"type","id":"type"},{"kind":"param","name":"context","id":"context"}],"line":"775"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"variable","name":"name","id":"name","line":"764"},{"kind":"constructor","name":"","id":"1()","comment":"\nCreates a variable literal with given name.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"initializedField":{"name":"name","refId":"math_expressions/Variable/name"},"kind":"param","name":"name","id":"name"}],"line":"769"}],"uri":"package:math_expressions/src/expression.dart","line":"763"},{"superclass":{"name":"Literal","refId":"math_expressions/Literal"},"kind":"class","name":"Vector","id":"Vector","comment":"\nA vector of arbitrary size.\n","children":[{"returnType":{"name":"Expression","refId":"math_expressions/Expression"},"kind":"method","name":"derive","id":"derive1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"toVar","id":"toVar"}],"line":"685"},{"returnType":{"name":"Expression","refId":"math_expressions/Expression"},"kind":"method","name":"simplify","id":"simplify0()","comment":"\nSimplifies all elements of this vector.\n","line":"699"},{"kind":"method","name":"evaluate","id":"evaluate2()","children":[{"ref":{"name":"EvaluationType","refId":"math_expressions/EvaluationType"},"kind":"param","name":"type","id":"type"},{"ref":{"name":"ContextModel","refId":"math_expressions/ContextModel"},"kind":"param","name":"context","id":"context"}],"line":"710"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"Expression","refId":"math_expressions/Expression"}]},"kind":"property","name":"elements","id":"elements","comment":"The elements of this vector.","line":"680"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"length","id":"length","comment":"The length of this vector.","line":"683"},{"kind":"constructor","name":"","id":"1()","comment":"\nCreates a vector with the given element expressions.\n\nFor example, to create a 3-dimensional vector:\n    x = y = z = new Number(1);\n    vec3 = new Vector([x, y, z]);\n","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"Expression","refId":"math_expressions/Expression"}]},"kind":"param","name":"elements","id":"elements"}],"line":"677"}],"uri":"package:math_expressions/src/expression.dart","line":"668"},{"superclass":{"name":"Literal","refId":"math_expressions/Literal"},"kind":"class","name":"Number","id":"Number","comment":"\nA number is a constant number literal.\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"isConstant","id":"isConstant0()","line":"644"},{"returnType":{"name":"double","refId":"dart.core/double"},"kind":"method","name":"getConstantValue","id":"getConstantValue0()","line":"646"},{"kind":"method","name":"evaluate","id":"evaluate2()","children":[{"ref":{"name":"EvaluationType","refId":"math_expressions/EvaluationType"},"kind":"param","name":"type","id":"type"},{"ref":{"name":"ContextModel","refId":"math_expressions/ContextModel"},"kind":"param","name":"context","id":"context"}],"line":"648"},{"returnType":{"name":"Expression","refId":"math_expressions/Expression"},"kind":"method","name":"derive","id":"derive1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"toVar","id":"toVar"}],"line":"662"},{"kind":"constructor","name":"","id":"1()","comment":"\nCreates a number literal with given value.\nAlways holds a double internally.\n","children":[{"ref":{"name":"num","refId":"dart.core/num"},"kind":"param","name":"value","id":"value"}],"line":"642"}],"uri":"package:math_expressions/src/expression.dart","line":"636"},{"superclass":{"name":"Expression","refId":"math_expressions/Expression"},"isAbstract":true,"kind":"class","name":"Literal","id":"Literal","comment":"\nA literal can be a number, a constant or a variable.\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"isConstant","id":"isConstant0()","comment":"\nReturns true, if this literal is a constant.\n","line":"619"},{"returnType":{"name":"num","refId":"dart.core/num"},"kind":"method","name":"getConstantValue","id":"getConstantValue0()","comment":"\nReturns the constant value of this literal.\nThrows StateError if literal is not constant, check before usage with\nisConstant().\n","line":"626"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"630"},{"kind":"variable","name":"value","id":"value","line":"608"},{"kind":"constructor","name":"","id":"1()","comment":"\nCreates a literal. The optional paramter `value` can be used to specify\nits value.\n","children":[{"isOptional":true,"initializedField":{"name":"value","refId":"math_expressions/Literal/value"},"kind":"param","name":"value","id":"value"}],"line":"614"}],"uri":"package:math_expressions/src/expression.dart","line":"607"},{"superclass":{"name":"BinaryOperator","refId":"math_expressions/BinaryOperator"},"kind":"class","name":"Power","id":"Power","comment":"\nThe power operator.\n","children":[{"returnType":{"name":"Expression","refId":"math_expressions/Expression"},"kind":"method","name":"derive","id":"derive1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"toVar","id":"toVar"}],"line":"491"},{"returnType":{"name":"Expression","refId":"math_expressions/Expression"},"kind":"method","name":"simplify","id":"simplify0()","comment":"\nPossible simplifications:\n\n1. 0^x = 0\n2. 1^x = 1\n3. x^0 = 1\n4. x^1 = x\n","line":"501"},{"kind":"method","name":"evaluate","id":"evaluate2()","children":[{"ref":{"name":"EvaluationType","refId":"math_expressions/EvaluationType"},"kind":"param","name":"type","id":"type"},{"ref":{"name":"ContextModel","refId":"math_expressions/ContextModel"},"kind":"param","name":"context","id":"context"}],"line":"539"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"591"},{"returnType":{"name":"Expression","refId":"math_expressions/Expression"},"kind":"method","name":"asE","id":"asE0()","comment":"\nReturns the exponential form of this operation.\nE.g. x^4 = e^(4x)\n\nThis method is used to determine the derivation of a power expression.\n","line":"599"},{"kind":"constructor","name":"","id":"2()","comment":"\nCreates a power operation on the given expressions.\n\nFor example, to create x^3:\n    pow = new Power('x', 3);\n\nor:\n    pow = new Variable('x') ^ new Number(3);\n","children":[{"kind":"param","name":"x","id":"x"},{"kind":"param","name":"exp","id":"exp"}],"line":"489"}],"uri":"package:math_expressions/src/expression.dart","line":"478"},{"superclass":{"name":"BinaryOperator","refId":"math_expressions/BinaryOperator"},"kind":"class","name":"Divide","id":"Divide","comment":"\nThe divide operator performs a division.\n","children":[{"returnType":{"name":"Expression","refId":"math_expressions/Expression"},"kind":"method","name":"derive","id":"derive1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"toVar","id":"toVar"}],"line":"417"},{"returnType":{"name":"Expression","refId":"math_expressions/Expression"},"kind":"method","name":"simplify","id":"simplify0()","comment":"\nPossible simplifications:\n\n1. -a / b = - (a / b)\n2. a * -b = - (a / b)\n3. -a / -b = a / b\n5. 0 / a = 0\n6. a / 1 = a\n\nThis method throws an IntegerDivisionByZeroException,\nif a divide by zero is encountered.\n","line":"433"},{"kind":"method","name":"evaluate","id":"evaluate2()","children":[{"ref":{"name":"EvaluationType","refId":"math_expressions/EvaluationType"},"kind":"param","name":"type","id":"type"},{"ref":{"name":"ContextModel","refId":"math_expressions/ContextModel"},"kind":"param","name":"context","id":"context"}],"line":"465"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"472"},{"kind":"constructor","name":"","id":"2()","comment":"\nCreates a division operation on the given expressions.\n\nFor example, to create x/(y+2):\n    div = new Divide('x', new Plus('y', 2));\n\nor:\n    div = new Variable('x') / (new Variable('y') + new Number(2));\n","children":[{"kind":"param","name":"dividend","id":"dividend"},{"kind":"param","name":"divisor","id":"divisor"}],"line":"415"}],"uri":"package:math_expressions/src/expression.dart","line":"404"},{"superclass":{"name":"BinaryOperator","refId":"math_expressions/BinaryOperator"},"kind":"class","name":"Times","id":"Times","comment":"\nThe times operator performs a multiplication.\n","children":[{"returnType":{"name":"Expression","refId":"math_expressions/Expression"},"kind":"method","name":"derive","id":"derive1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"toVar","id":"toVar"}],"line":"338"},{"returnType":{"name":"Expression","refId":"math_expressions/Expression"},"kind":"method","name":"simplify","id":"simplify0()","comment":"\nPossible simplifications:\n\n1. -a * b = - (a * b)\n2. a * -b = - (a * b)\n3. -a * -b = a * b\n4. a * 0 = 0\n5. 0 * a = 0\n6. a * 1 = a\n7. 1 * a = a\n","line":"352"},{"kind":"method","name":"evaluate","id":"evaluate2()","children":[{"ref":{"name":"EvaluationType","refId":"math_expressions/EvaluationType"},"kind":"param","name":"type","id":"type"},{"ref":{"name":"ContextModel","refId":"math_expressions/ContextModel"},"kind":"param","name":"context","id":"context"}],"line":"393"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"398"},{"kind":"constructor","name":"","id":"2()","comment":"\nCreates a product operation on the given expressions.\n\nFor example, to create 7 * x:\n    product = new Times(7, 'x');\n\nor:\n    product = new Number(7) * new Variable('x');\n","children":[{"kind":"param","name":"first","id":"first"},{"kind":"param","name":"second","id":"second"}],"line":"336"}],"uri":"package:math_expressions/src/expression.dart","line":"325"},{"superclass":{"name":"BinaryOperator","refId":"math_expressions/BinaryOperator"},"kind":"class","name":"Minus","id":"Minus","comment":"\nThe minus operator performs a subtraction.\n","children":[{"returnType":{"name":"Expression","refId":"math_expressions/Expression"},"kind":"method","name":"derive","id":"derive1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"toVar","id":"toVar"}],"line":"283"},{"returnType":{"name":"Expression","refId":"math_expressions/Expression"},"kind":"method","name":"simplify","id":"simplify0()","comment":"\nPossible simplifications:\n\n1. a - 0 = a\n2. 0 - a = a\n3. a - -(b) = a + b\n","line":"293"},{"kind":"method","name":"evaluate","id":"evaluate2()","children":[{"ref":{"name":"EvaluationType","refId":"math_expressions/EvaluationType"},"kind":"param","name":"type","id":"type"},{"ref":{"name":"ContextModel","refId":"math_expressions/ContextModel"},"kind":"param","name":"context","id":"context"}],"line":"315"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"319"},{"kind":"constructor","name":"","id":"2()","comment":"\nCreates a subtaction operation on the given expressions.\n\nFor example, to create 5 - x:\n    subtraction = new Minus(5, 'x');\n\nor:\n    subtraction = new Number(5) - new Variable('x');\n","children":[{"kind":"param","name":"first","id":"first"},{"kind":"param","name":"second","id":"second"}],"line":"281"}],"uri":"package:math_expressions/src/expression.dart","line":"270"},{"superclass":{"name":"BinaryOperator","refId":"math_expressions/BinaryOperator"},"kind":"class","name":"Plus","id":"Plus","comment":"\nThe plus operator performs an addition.\n","children":[{"returnType":{"name":"Expression","refId":"math_expressions/Expression"},"kind":"method","name":"derive","id":"derive1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"toVar","id":"toVar"}],"line":"228"},{"returnType":{"name":"Expression","refId":"math_expressions/Expression"},"kind":"method","name":"simplify","id":"simplify0()","comment":"\nPossible simplifications:\n\n1. a + 0 = a\n2. 0 + a = a\n3. a + -(b) = a - b\n","line":"238"},{"kind":"method","name":"evaluate","id":"evaluate2()","children":[{"ref":{"name":"EvaluationType","refId":"math_expressions/EvaluationType"},"kind":"param","name":"type","id":"type"},{"ref":{"name":"ContextModel","refId":"math_expressions/ContextModel"},"kind":"param","name":"context","id":"context"}],"line":"260"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"264"},{"kind":"constructor","name":"","id":"2()","comment":"\nCreates an addition operation on the given expressions.\n\nFor example, to create x + 4:\n    addition = new Plus('x', 4);\n\nor:\n    addition = new Variable('x') + new Number(4);\n","children":[{"kind":"param","name":"first","id":"first"},{"kind":"param","name":"second","id":"second"}],"line":"226"}],"uri":"package:math_expressions/src/expression.dart","line":"215"},{"superclass":{"name":"UnaryOperator","refId":"math_expressions/UnaryOperator"},"kind":"class","name":"UnaryMinus","id":"UnaryMinus","comment":"\nThe unary minus negates its argument.\n","children":[{"returnType":{"name":"Expression","refId":"math_expressions/Expression"},"kind":"method","name":"derive","id":"derive1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"toVar","id":"toVar"}],"line":"180"},{"returnType":{"name":"Expression","refId":"math_expressions/Expression"},"kind":"method","name":"simplify","id":"simplify0()","comment":"\nPossible simplifications:\n\n1. -(-a) = a\n2. -0 = 0\n","line":"188"},{"kind":"method","name":"evaluate","id":"evaluate2()","children":[{"ref":{"name":"EvaluationType","refId":"math_expressions/EvaluationType"},"kind":"param","name":"type","id":"type"},{"ref":{"name":"ContextModel","refId":"math_expressions/ContextModel"},"kind":"param","name":"context","id":"context"}],"line":"205"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"209"},{"kind":"constructor","name":"","id":"1()","comment":"\nCreates a new unary minus operation on the given expression.\n\nFor example, to create -1:\n    one = new Number(1);\n    minus_one = new UnaryMinus(one);\n\nor just:\n    minus_one = new UnaryMinus(-1);\n","children":[{"kind":"param","name":"exp","id":"exp"}],"line":"178"}],"uri":"package:math_expressions/src/expression.dart","line":"166"},{"superclass":{"name":"Expression","refId":"math_expressions/Expression"},"isAbstract":true,"kind":"class","name":"UnaryOperator","id":"UnaryOperator","comment":"\nA unary operator takes one argument and performs an operation on it.\n","children":[{"ref":{"name":"Expression","refId":"math_expressions/Expression"},"kind":"variable","name":"exp","id":"exp","line":"142"},{"kind":"constructor","name":"","id":"1()","comment":"\nCreates a [UnaryOperation] from the given argument.\n\nIf the argument is not an expression, it will be wrapped in an appropriate\nliteral.\n\n* A (positive) number will be encapsulated in a [Number] Literal,\n* A string will be encapsulated in a [Variable] Literal.\n","children":[{"kind":"param","name":"exp","id":"exp"}],"line":"153"},{"kind":"constructor","name":"raw","id":"raw1()","comment":"\nCreates a [UnaryOperation] from the given expression.\n","children":[{"ref":{"name":"Expression","refId":"math_expressions/Expression"},"initializedField":{"name":"exp","refId":"math_expressions/UnaryOperator/exp"},"kind":"param","name":"exp","id":"exp"}],"line":"160"}],"uri":"package:math_expressions/src/expression.dart","line":"141"},{"superclass":{"name":"Expression","refId":"math_expressions/Expression"},"isAbstract":true,"kind":"class","name":"BinaryOperator","id":"BinaryOperator","comment":"\nA binary operator takes two expressions and performs an operation on them.\n","children":[{"ref":{"name":"Expression","refId":"math_expressions/Expression"},"kind":"variable","name":"first","id":"first","line":"116"},{"ref":{"name":"Expression","refId":"math_expressions/Expression"},"kind":"variable","name":"second","id":"second","line":"116"},{"kind":"constructor","name":"","id":"2()","comment":"\nCreates a [BinaryOperation] from two given arguments.\n\nIf an argument is not an expression, it will be wrapped in an appropriate\nliteral.\n\n * A (positive) number will be encapsulated in a [Number] Literal,\n * A string will be encapsulated in a [Variable] Literal.\n","children":[{"kind":"param","name":"first","id":"first"},{"kind":"param","name":"second","id":"second"}],"line":"127"},{"kind":"constructor","name":"raw","id":"raw2()","comment":"\nCreates a new [BinaryOperation] from two given expressions.\n","children":[{"ref":{"name":"Expression","refId":"math_expressions/Expression"},"initializedField":{"name":"first","refId":"math_expressions/BinaryOperator/first"},"kind":"param","name":"first","id":"first"},{"ref":{"name":"Expression","refId":"math_expressions/Expression"},"initializedField":{"name":"second","refId":"math_expressions/BinaryOperator/second"},"kind":"param","name":"second","id":"second"}],"line":"135"}],"uri":"package:math_expressions/src/expression.dart","line":"115"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"Expression","id":"Expression","comment":"\nAny Expression supports basic mathematical operations like\naddition, subtraction, multiplication, division, power and negate.\n\nFurthermore, any expression can be differentiated with respect to\na given variable. Also expressions know how to simplify themselves.\n\nThere are different classes of expressions:\n\n* Literals (see [Literal])\n\n    * Number Literals (see [Number])\n    * Variable Literals (see [Variable])\n    * Interval Literals (see [IntervalLiteral])\n* Operators (support auto-wrapping of parameters into Literals)\n\n    * Unary Operators (see [UnaryOperator])\n    * Binary Operators (see [BinaryOperator])\n* Functions (see [MathFunction])\n\n    * Pre-defined Functions (see [DefaultFunction])\n    * Custom Functions (see [CustomFunction])\n\nPre-defined functions are [Exponential], [Log], [Ln], nth-[Root], [Sqrt],\n[Sin] and [Cos].\n","children":[{"returnType":{"name":"Expression","refId":"math_expressions/Expression"},"isOperator":true,"kind":"method","name":"+","id":"+1()","children":[{"ref":{"name":"Expression","refId":"math_expressions/Expression"},"kind":"param","name":"exp","id":"exp"}],"line":"32"},{"returnType":{"name":"Expression","refId":"math_expressions/Expression"},"isOperator":true,"kind":"method","name":"-","id":"-1()","children":[{"ref":{"name":"Expression","refId":"math_expressions/Expression"},"kind":"param","name":"exp","id":"exp"}],"line":"33"},{"returnType":{"name":"Expression","refId":"math_expressions/Expression"},"isOperator":true,"kind":"method","name":"*","id":"*1()","children":[{"ref":{"name":"Expression","refId":"math_expressions/Expression"},"kind":"param","name":"exp","id":"exp"}],"line":"34"},{"returnType":{"name":"Expression","refId":"math_expressions/Expression"},"isOperator":true,"kind":"method","name":"/","id":"#slash1()","children":[{"ref":{"name":"Expression","refId":"math_expressions/Expression"},"kind":"param","name":"exp","id":"exp"}],"line":"35"},{"returnType":{"name":"Expression","refId":"math_expressions/Expression"},"isOperator":true,"kind":"method","name":"^","id":"^1()","children":[{"ref":{"name":"Expression","refId":"math_expressions/Expression"},"kind":"param","name":"exp","id":"exp"}],"line":"36"},{"returnType":{"name":"Expression","refId":"math_expressions/Expression"},"isOperator":true,"kind":"method","name":"unary-","id":"unary-0()","line":"37"},{"returnType":{"name":"Expression","refId":"math_expressions/Expression"},"kind":"method","name":"derive","id":"derive1()","comment":"\nDerives this expression with respect to the given variable.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"toVar","id":"toVar"}],"line":"42"},{"returnType":{"name":"Expression","refId":"math_expressions/Expression"},"kind":"method","name":"simplify","id":"simplify0()","comment":"\nReturns a simplified version of this expression.\nSubclasses should overwrite this method, if applicable.\n","line":"49"},{"kind":"method","name":"evaluate","id":"evaluate2()","comment":"\nEvaluates this expression according to given type and context.\n","children":[{"ref":{"name":"EvaluationType","refId":"math_expressions/EvaluationType"},"kind":"param","name":"type","id":"type"},{"ref":{"name":"ContextModel","refId":"math_expressions/ContextModel"},"kind":"param","name":"context","id":"context"}],"line":"54"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"56"},{"returnType":{"name":"Expression","refId":"math_expressions/Expression"},"kind":"method","name":"_toExpression","id":"_toExpression1()","comment":"\nConverts the given argument to a valid expression.\n\nReturns the argument, if it is already an expression.\nElse wraps the argument in a [Number] or [Variable] Literal.\n\nThrows ArgumentError, if given arg is not an Expression, num oder String.\n\nNote: Does not handle negative numbers, will treat them as positives!\n","children":[{"kind":"param","name":"arg","id":"arg"}],"isPrivate":true,"line":"68"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"_isNumber","id":"_isNumber2()","comment":"\nReturns true, if the given expression is a constant literal and its value\nmatches the given value.\n","children":[{"ref":{"name":"Expression","refId":"math_expressions/Expression"},"kind":"param","name":"exp","id":"exp"},{"ref":{"name":"num","refId":"dart.core/num"},"defaultValue":"0","isOptional":true,"kind":"param","name":"value","id":"value"}],"isPrivate":true,"line":"89"}],"uri":"package:math_expressions/src/expression.dart","line":"29"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"interfaces":[{"name":"Comparable","refId":"dart.core/Comparable"}],"kind":"class","name":"Interval","id":"Interval","comment":"\nAn [Interval] is defined by its minimum and maximum values, where min <= max.\n\nIt supports basic interval arithmetic operations like addition,\nsubtraction, multiplication and division. Operations return a new\ninterval and will not modify the existing ones.\n\nThis implementation also (partly) supports unbounded intervals with borders\nat +/- infinity and empty sets.\n\n__Note__: This implementaion does not offer a complete set of operations yet:\n\n- No handling of unbounded intervals in operators.\n- No proper rounding.\n","children":[{"isOperator":true,"kind":"method","name":"+","id":"+1()","comment":"\nPerforms an interval addition.\n\n    [a, b] + [c, d] = [a + c, b + d]\n","children":[{"ref":{"name":"Interval","refId":"math_expressions/Interval"},"kind":"param","name":"i","id":"i"}],"line":"137"},{"isOperator":true,"kind":"method","name":"unary-","id":"unary-0()","comment":"\nUnary minus on intervals.\n\n    -[a, b] = [-b, -a]\n","line":"147"},{"isOperator":true,"kind":"method","name":"-","id":"-1()","comment":"\nPerforms an interval subtraction.\n\n    [a, b] + [c, d] = [a - d, b - c]\n","children":[{"ref":{"name":"Interval","refId":"math_expressions/Interval"},"kind":"param","name":"i","id":"i"}],"line":"156"},{"isOperator":true,"kind":"method","name":"*","id":"*1()","comment":"\nPerforms an interval multiplication.\n\n    [a, b] * [c, d] = [min(ac, ad, bc, bd), max(ac, ad, bc, bd)]\n","children":[{"ref":{"name":"Interval","refId":"math_expressions/Interval"},"kind":"param","name":"i","id":"i"}],"line":"166"},{"isOperator":true,"kind":"method","name":"/","id":"#slash1()","comment":"\nPerforms an interval division.\n\n    [a, b] * [c, d] = [a, b] * (1/[c, d]) = [a, b] * [1/d, 1/c]\n\nNote: Does not handle division by zero and throws an ArgumentError instead.\n","children":[{"ref":{"name":"Interval","refId":"math_expressions/Interval"},"kind":"param","name":"i","id":"i"}],"line":"180"},{"isOperator":true,"kind":"method","name":"==","id":"==1()","comment":"\nEquals operator on intervals.\n\n    [a, b] == [c, d], if a == c && b == d\n","children":[{"ref":{"name":"Interval","refId":"math_expressions/Interval"},"kind":"param","name":"i","id":"i"}],"line":"238"},{"isOperator":true,"kind":"method","name":"<","id":"<1()","comment":"\nLess than operator on intervals.\n\n    [a, b] < [c, d], if a < c && b < d\n","children":[{"ref":{"name":"Interval","refId":"math_expressions/Interval"},"kind":"param","name":"i","id":"i"}],"line":"245"},{"isOperator":true,"kind":"method","name":"<=","id":"<=1()","comment":"\nLess or equal than operator on intervals.\n\n    [a, b] <= [c, d], if a <= c && b <= d\n","children":[{"ref":{"name":"Interval","refId":"math_expressions/Interval"},"kind":"param","name":"i","id":"i"}],"line":"252"},{"isOperator":true,"kind":"method","name":">","id":">1()","comment":"\nGreater than operator on intervals.\n\n    [a, b] > [c, d], if a > c && b > d\n","children":[{"ref":{"name":"Interval","refId":"math_expressions/Interval"},"kind":"param","name":"i","id":"i"}],"line":"259"},{"isOperator":true,"kind":"method","name":">=","id":">=1()","comment":"\nGreater or equal than operator on intervals.\n\n    [a, b] >= [c, d], if a >= c && b >= d\n","children":[{"ref":{"name":"Interval","refId":"math_expressions/Interval"},"kind":"param","name":"i","id":"i"}],"line":"266"},{"returnType":{"name":"Interval","refId":"math_expressions/Interval"},"kind":"method","name":"glb","id":"glb1()","comment":"\nReturns the greatest lower bound.\n","children":[{"ref":{"name":"Interval","refId":"math_expressions/Interval"},"kind":"param","name":"i","id":"i"}],"line":"271"},{"returnType":{"name":"Interval","refId":"math_expressions/Interval"},"kind":"method","name":"lub","id":"lub1()","comment":"\nReturns the least upper bound.\n","children":[{"ref":{"name":"Interval","refId":"math_expressions/Interval"},"kind":"param","name":"i","id":"i"}],"line":"277"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"includes","id":"includes1()","comment":"\nInclusion relation. Returns true, if the given interval is included\nin this interval.\n\n    [a, b] subset of [c, d] <=> c <= a && b >= d\n","children":[{"ref":{"name":"Interval","refId":"math_expressions/Interval"},"kind":"param","name":"i","id":"i"}],"line":"286"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"contains","id":"contains1()","comment":"\nElement-of relation. Returns true, if given element is included\nin this interval.\nDefined on a real number i and an interval:\n\n    i element of [a, b] <=> a <= i && i <= b\n","children":[{"ref":{"name":"num","refId":"dart.core/num"},"kind":"param","name":"element","id":"element"}],"line":"296"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"containsZero","id":"containsZero0()","comment":"\nReturns true, if this interval contains zero (min <= 0 <= max).\n","line":"301"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"isPositive","id":"isPositive0()","comment":"\nReturns true, if this interval is positive (min >= 0)\n","line":"306"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"isBound","id":"isBound0()","comment":"\nReturns true, if neither min or max values are infinite.\n","line":"311"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"isEmpty","id":"isEmpty0()","comment":"\nReturns true, if this is the empty set.\n","line":"316"},{"returnType":{"name":"num","refId":"dart.core/num"},"kind":"method","name":"_min","id":"_min4()","comment":"\nReturns the minimal value of four given values.\n","children":[{"ref":{"name":"num","refId":"dart.core/num"},"kind":"param","name":"a","id":"a"},{"ref":{"name":"num","refId":"dart.core/num"},"kind":"param","name":"b","id":"b"},{"ref":{"name":"num","refId":"dart.core/num"},"kind":"param","name":"c","id":"c"},{"ref":{"name":"num","refId":"dart.core/num"},"kind":"param","name":"d","id":"d"}],"isPrivate":true,"line":"321"},{"returnType":{"name":"num","refId":"dart.core/num"},"kind":"method","name":"_max","id":"_max4()","comment":"\nReturns the maximum value of four given values.\n","children":[{"ref":{"name":"num","refId":"dart.core/num"},"kind":"param","name":"a","id":"a"},{"ref":{"name":"num","refId":"dart.core/num"},"kind":"param","name":"b","id":"b"},{"ref":{"name":"num","refId":"dart.core/num"},"kind":"param","name":"c","id":"c"},{"ref":{"name":"num","refId":"dart.core/num"},"kind":"param","name":"d","id":"d"}],"isPrivate":true,"line":"326"},{"returnType":{"name":"num","refId":"dart.core/num"},"kind":"method","name":"length","id":"length0()","comment":"\nReturns the length of this interval.\n","line":"331"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"333"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"compareTo","id":"compareTo1()","children":[{"ref":{"name":"Comparable","refId":"dart.core/Comparable"},"kind":"param","name":"other","id":"other"}],"line":"335"},{"ref":{"name":"num","refId":"dart.core/num"},"kind":"variable","name":"min","id":"min","comment":"Interval borders.","line":"104"},{"ref":{"name":"num","refId":"dart.core/num"},"kind":"variable","name":"max","id":"max","comment":"Interval borders.","line":"104"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"variable","name":"emptySet","id":"emptySet","comment":"True, if this represents the empty set.","line":"107"},{"ref":{"name":"Interval","refId":"math_expressions/Interval"},"isStatic":true,"isFinal":true,"kind":"variable","name":"_emptyInterval","id":"_emptyInterval","comment":"Immutable singleton instance of empty set.","isPrivate":true,"line":"110"},{"kind":"constructor","name":"","id":"2()","comment":"\nCreates a new interval with given borders.\n\nThe parameter min must be smaller or equal than max for the interval\nto work properly.\n","children":[{"ref":{"name":"num","refId":"dart.core/num"},"initializedField":{"name":"min","refId":"math_expressions/Interval/min"},"kind":"param","name":"min","id":"min"},{"ref":{"name":"num","refId":"dart.core/num"},"initializedField":{"name":"max","refId":"math_expressions/Interval/max"},"kind":"param","name":"max","id":"max"}],"line":"118"},{"returnType":{"name":"Interval","refId":"math_expressions/Interval"},"kind":"constructor","name":"empty","id":"empty0()","comment":"\nReturns an immutable empty set.\n","line":"123"},{"kind":"constructor","name":"_empty","id":"_empty0()","comment":"\nInternal constructor for an empty set.\n","isPrivate":true,"line":"128"}],"uri":"package:math_expressions/src/algebra.dart","line":"101"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"Point3D","id":"Point3D","comment":"\nA point in 3-dimensional space.\nThis implementation supplies common mathematical operations on points.\n","children":[{"returnType":{"name":"Point3D","refId":"math_expressions/Point3D"},"isOperator":true,"kind":"method","name":"+","id":"+1()","comment":"\nReturns a new point which position is determined by moving the old point\nalong the given vector.\n","children":[{"ref":{"name":"Vector3","refId":"vector_math/Vector3"},"kind":"param","name":"v","id":"v"}],"line":"35"},{"returnType":{"name":"Vector3","refId":"vector_math/Vector3"},"isOperator":true,"kind":"method","name":"-","id":"-1()","comment":"\nReturns the [Vector3] pointing from the given point to this point.\n","children":[{"ref":{"name":"Point3D","refId":"math_expressions/Point3D"},"kind":"param","name":"p2","id":"p2"}],"line":"40"},{"returnType":{"name":"Point3D","refId":"math_expressions/Point3D"},"isOperator":true,"kind":"method","name":"unary-","id":"unary-0()","comment":"\nNegates the point's components.\n","line":"45"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"isOperator":true,"kind":"method","name":"==","id":"==1()","comment":"\nChecks for equality. Two points are considered equal, if their coordinates\nmatch.\n","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"o","id":"o"}],"line":"51"},{"returnType":{"name":"Point3D","refId":"math_expressions/Point3D"},"kind":"method","name":"lerp","id":"lerp2()","comment":"\nPerforms a linear interpolation between two points.\n","children":[{"ref":{"name":"Point3D","refId":"math_expressions/Point3D"},"kind":"param","name":"p2","id":"p2"},{"ref":{"name":"num","refId":"dart.core/num"},"kind":"param","name":"coeff","id":"coeff"}],"line":"63"},{"returnType":{"name":"Vector3","refId":"vector_math/Vector3"},"kind":"method","name":"toVec3","id":"toVec30()","comment":"\nTransforms the point to its vector representation.\n","line":"75"},{"returnType":{"name":"Vector4","refId":"vector_math/Vector4"},"kind":"method","name":"toVec4","id":"toVec40()","comment":"\nTransforms the point to its homogeneous vector4 representation.\nThe w component is set to 1.\n","line":"81"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"83"},{"ref":{"name":"double","refId":"dart.core/double"},"kind":"variable","name":"x","id":"x","line":"9"},{"ref":{"name":"double","refId":"dart.core/double"},"kind":"variable","name":"y","id":"y","line":"9"},{"ref":{"name":"double","refId":"dart.core/double"},"kind":"variable","name":"z","id":"z","line":"9"},{"kind":"constructor","name":"","id":"3()","comment":"\nCreates a new Point3D with the given coordinates.\n","children":[{"ref":{"name":"double","refId":"dart.core/double"},"initializedField":{"name":"x","refId":"math_expressions/Point3D/x"},"kind":"param","name":"x","id":"x"},{"ref":{"name":"double","refId":"dart.core/double"},"initializedField":{"name":"y","refId":"math_expressions/Point3D/y"},"kind":"param","name":"y","id":"y"},{"ref":{"name":"double","refId":"dart.core/double"},"initializedField":{"name":"z","refId":"math_expressions/Point3D/z"},"kind":"param","name":"z","id":"z"}],"line":"14"},{"kind":"constructor","name":"vec","id":"vec1()","comment":"\nCreates a new Point3D from given vector3 / vector4.\n","children":[{"kind":"param","name":"vec","id":"vec"}],"line":"19"},{"kind":"constructor","name":"splat","id":"splat1()","comment":"\nCreates a new Point3D and \"splats\" the given value to each coordinate.\n","children":[{"ref":{"name":"num","refId":"dart.core/num"},"kind":"param","name":"val","id":"val"}],"line":"24"},{"kind":"constructor","name":"zero","id":"zero0()","comment":"\nCreates a new Point3D at the coordinate origin.\n","line":"29"}],"uri":"package:math_expressions/src/algebra.dart","line":"7"}],"uri":"package:math_expressions/math_expressions.dart","line":"25"}